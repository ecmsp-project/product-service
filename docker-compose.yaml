name: ecmsp-full

services:

    cart-service:
        build:
            context: ../cart-service
            dockerfile: Dockerfile
        container_name: cart-service
        ports:
            - "${CART_SERVICE_PORT:?err}:8080"
        env_file:
            -
                path: ../cart-service/docker/app-env.txt
                required: false
        depends_on:
            cart-service-db:
                restart: true
                condition: service_healthy
    #
    cart-service-db:
        image: postgres:15-alpine
        container_name: cart-service-db
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        ports:
            - "${CART_SERVICE_DB_PORT:?err}:5432"
        volumes:
            - ../cart-service/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
            - cart-service-db:/var/lib/postgresql/data
        secrets:
            - cart-service-db-password
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_DB=cart-service-db
            - POSTGRES_PASSWORD_FILE=/run/secrets/cart-service-db-password
        env_file:
            -
                path: ../cart-service/docker/database-env.txt
                required: false
    #

    order-service:
        build:
            context: ../order-service
            dockerfile: Dockerfile
        container_name: order-service
        ports:
            - "${ORDER_SERVICE_PORT:?err}:8080"
        env_file:
            -
                path: ../order-service/docker/app-env.txt
                required: false
        depends_on:
            order-service-db:
                restart: true
                condition: service_healthy
    #
    order-service-db:
        image: postgres:15-alpine
        container_name: order-service-db
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        ports:
            - "${ORDER_SERVICE_DB_PORT:?err}:5432"
        volumes:
            - ../order-service/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
            - order-service-db:/var/lib/postgresql/data
        secrets:
            - order-service-db-password
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_DB=order-service-db
            - POSTGRES_PASSWORD_FILE=/run/secrets/order-service-db-password
        env_file:
            -
                path: ../order-service/docker/database-env.txt
                required: false
    #

    payment-service:
        build:
            context: ../payment-service
            dockerfile: Dockerfile
        container_name: payment-service
        ports:
            - "${PAYMENT_SERVICE_PORT:?err}:8080"
        env_file:
            -
                path: ../payment-service/docker/app-env.txt
                required: false
        depends_on:
            payment-service-db:
                restart: true
                condition: service_healthy
    #
    payment-service-db:
        image: postgres:15-alpine
        container_name: payment-service-db
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\""]
            interval: 10s
            retries: 5
            start_period: 30s
            timeout: 10s
        ports:
            - "${PAYMENT_SERVICE_DB_PORT:?err}:5432"
        volumes:
            - ../payment-service/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
            - payment-service-db:/var/lib/postgresql/data
        secrets:
            - payment-service-db-password
        environment:
            - POSTGRES_USER=admin
            - POSTGRES_DB=payment-service-db
            - POSTGRES_PASSWORD_FILE=/run/secrets/payment-service-db-password
        env_file:
            -
                path: ../payment-service/docker/database-env.txt
                required: false
    #

secrets:
    cart-service-db-password:
        file: ../cart-service/docker/database-password.txt
    order-service-db-password:
        file: ../order-service/docker/database-password.txt
    payment-service-db-password:
        file: ../payment-service/docker/database-password.txt

volumes:
    cart-service-db:
    order-service-db:
    payment-service-db:

# docker compose -f product-docker-compose.yaml up cart-service-db
# docker compose -f product-docker-compose.yaml down -v